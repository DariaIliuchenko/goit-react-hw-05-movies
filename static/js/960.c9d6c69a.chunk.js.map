{"version":3,"file":"static/js/960.c9d6c69a.chunk.js","mappings":"kMAEaA,EAAeC,EAAAA,GAAAA,IAAH,gFAOZC,EAAQD,EAAAA,GAAAA,GAAH,gI,SCUlB,EAfkB,SAAC,GAA8B,IAAD,IAA3BE,MAAAA,OAA2B,MAAnB,GAAmB,EAAfC,EAAe,EAAfA,SAC/B,OACE,UAACJ,EAAD,WACGG,IAAS,SAACD,EAAD,UAAQC,IAEjBC,IAGN,C,sECVYC,E,QAAaJ,GAAAA,QAAH,iG,SCSvB,EARgB,SAAC,GAAkB,IAAhBG,EAAe,EAAfA,SACjB,OAAO,SAACC,EAAD,UAAaD,GACrB,C,4JCHYE,EAAQL,EAAAA,GAAAA,GAAH,mLAULM,EAAON,EAAAA,GAAAA,GAAH,4MAYJO,EAAQP,EAAAA,GAAAA,EAAH,4F,mBCSlB,EA5Ba,WACX,IAAMQ,ECFoB,WACxB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOH,EAAP,KAAaI,EAAb,KAKA,OAHAC,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,IAAeL,GAASM,KAAKH,EAChC,GAAC,CAACH,IACID,CACV,CDNcQ,GAEb,OACE,SAACC,EAAA,EAAD,WACE,SAACC,EAAA,EAAD,UACCV,IACC,+BACE,SAACH,EAAD,UACGG,EAAKA,KAAKW,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aACrC,OACE,UAACjB,EAAD,WACGiB,GACC,gBAAKC,IAAG,8DAAyDD,GAAiBE,IAAKJ,KACpF,gBAAKG,IAAKE,EAAQD,IAAI,SAASE,MAAM,MAAMC,OAAO,SACvD,SAACrB,EAAD,UAAQc,KACR,uBAAIC,MALKF,EAQd,WAOZ,C,oOE5BDS,IAAAA,SAAAA,QAAyB,gCACzBA,IAAAA,SAAAA,OAAwB,CAAEC,QAFd,oCAGL,IAAMC,EAAY,8BAElB,SAAgBC,IAAvB,4CAAO,OAAP,oBAAO,oGACoBH,IAAM,sBAD1B,cACGI,EADH,yBAEIA,EAASC,MAFb,kEAIA,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,yGAAsCC,EAAtC,+BAA8C,GAA9C,SACoBP,IAAAA,IAAA,6BAAgCO,IADpD,cACGH,EADH,yBAEIA,EAASC,KAAKG,SAFlB,mEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8B7B,GAA9B,uFACoBoB,IAAAA,IAAA,iBAAoBpB,IADxC,cACGwB,EADH,yBAEIA,EAASC,MAFb,kEAOA,SAAepB,EAAtB,+CAAO,OAAP,oBAAO,WAA8ByB,GAA9B,uFACoBV,IAAAA,IAAA,gBAAmBU,EAAnB,aADpB,cACGN,EADH,yBAEIA,EAASC,MAFb,kEAKA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAiCD,GAAjC,uFACoBV,IAAAA,IAAA,gBAAmBU,EAAnB,aADpB,cACGN,EADH,yBAEIA,EAASC,MAFb,kE","sources":["components/Container/Container.styled.js","components/Container/Container.jsx","components/Section/Section.styled.js","components/Section/Section.jsx","pages/Cast/Cast.styled.js","pages/Cast/Cast.jsx","hooks/useFetchCast.js","servises/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ContainerWpr = styled.div`\n  padding: 0;\n  margin: 0 auto;\n  width: 1280px;\n  \n`;\n\nexport const Title = styled.h2`\n  font-size: 36px;\n  font-weight: 700;\n  margin-bottom: 60px;\n  text-align: center;\n  color: #fff;\n`;","import PropTypes from 'prop-types';\n\nimport { ContainerWpr, Title } from './Container.styled';\n\nconst Container = ({ title = '', children }) => {\n  return (\n    <ContainerWpr>\n      {title && <Title>{title}</Title>}\n\n      {children}\n    </ContainerWpr>\n  );\n};\n\nContainer.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Container;","import styled from 'styled-components';\n\nexport const SectionWrp = styled.section`\n  padding-top: 34px;\n  padding-bottom: 34px;\n  min-height: 100vh;\n  \n`;\n","import PropTypes from 'prop-types';\nimport { SectionWrp } from './Section.styled';\n\nconst Section = ({ children }) => {\n  return <SectionWrp>{children}</SectionWrp>;\n};\n\nSection.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;","import styled from 'styled-components';\n\nexport const Casts = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 50px;\n  background: rgba(32,51,54,1);\n  margin-bottom: 30px;\n  align-items: baseline;\n  padding-left: 0;\n`;\n\nexport const Item = styled.li`\n  margin: 10px;\n  width: 140px;\n  display: flex;\n  justify-content: center;\n  text-align: center;\n  flex-direction: column;\n  align-items: space-around;\n  color: #fff;\n  \n`;\n\nexport const Actor = styled.b`\n  margin-bottom: 10px;\n  margin-top: 10px;\n  color: red;\n  \n  \n`;\n\n","import Container from 'components/Container/Container';\nimport Section from 'components/Section/Section';\nimport { useFetchCast } from '../../hooks/useFetchCast';\nimport { Casts, Item, Actor } from './Cast.styled';\nimport avatar from \"../../assets/img/avatar.jpg\"\nconst Cast = () => {\n  const cast = useFetchCast();\n\n  return (\n    <Section>\n      <Container>\n      {cast && (\n        <>\n          <Casts>\n            {cast.cast.map(({ id, name, character, profile_path }) => {\n              return (\n                <Item key={id}>\n                  {profile_path ? (\n                    <img src={`https://www.themoviedb.org/t/p/w300_and_h450_bestv2/${profile_path}`}  alt={name}/>\n                  ) : (<img src={avatar} alt=\"avatar\" width=\"140\" height=\"210\" />)}\n                  <Actor>{name}</Actor>\n                  <p>{character}</p>\n                </Item>\n              );\n            })}\n          </Casts>\n        </>\n      )}\n    </Container>\n    </Section>\n  );\n};\n\nexport default Cast","import { useState, useEffect } from \"react\";\nimport { fetchMovieCast } from \"../servises/api\";\nimport { useParams } from \"react-router-dom\";\n\nexport const useFetchCast = () => {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState('');\n\n    useEffect(() => {\n        fetchMovieCast(movieId).then(setCast)\n    },[movieId])\n    return cast\n}","import axios from \"axios\";\n\nconst KEY = \"a853a8d0502c53b63fcd011b60b0bc46\";\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\";\naxios.defaults.params = { api_key: KEY };\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/';\n\nexport async function  fetchGetTrendMovies() {\n    const response = await axios(\"trending/movie/day\")\n    return response.data;\n}\nexport async function fetchSearchMovieByWord(query = '') {\n    const response = await axios.get(`search/movie?query=${query}`);\n    return response.data.results;\n  \n}\nexport async function fetchMovieById(movieId) {\n    const response = await axios.get(`/movie/${movieId}`)\n    return response.data\n}\n \n\n \nexport async function fetchMovieCast(movie_id) {\n    const response = await axios.get(`movie/${movie_id}/credits`)\n    return response.data\n}\n \nexport async function fetchMovieReviews(movie_id) {\n    const response = await axios.get(`movie/${movie_id}/reviews`)\n    return response.data\n }"],"names":["ContainerWpr","styled","Title","title","children","SectionWrp","Casts","Item","Actor","cast","movieId","useParams","useState","setCast","useEffect","fetchMovieCast","then","useFetchCast","Section","Container","map","id","name","character","profile_path","src","alt","avatar","width","height","axios","api_key","IMAGE_URL","fetchGetTrendMovies","response","data","fetchSearchMovieByWord","query","results","fetchMovieById","movie_id","fetchMovieReviews"],"sourceRoot":""}